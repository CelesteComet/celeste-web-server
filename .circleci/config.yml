version: 2 # use CircleCI 2.0
jobs: # basic units of work in a run
  build: # runs not using Workflows must have a `build` job as entry point
    docker: # run the steps with Docker
      # CircleCI Go images available at: https://hub.docker.com/r/circleci/golang/
      - image: circleci/golang:1.8 #
      # CircleCI PostgreSQL images available at: https://hub.docker.com/r/circleci/postgres/
    # directory where steps are run. Path must conform to the Go Workspace requirements
    working_directory: /go/src/github.com/CelesteComet/celeste-web-server

    steps: # steps that comprise the `build` job
      - checkout # check out source code to working directory
      # Normally, this step would be in a custom primary image;

      # we've added it here for the sake of explanation.
      #- run: go get github.com/lib/pq
      #- run: go get github.com/mattes/migrate
      #- run: go get github.com/jstemmer/go-junit-report

      #  CircleCi's Go Docker image includes netcat
      #  This allows polling the DB port to confirm it is open before proceeding
      - run:
          name: Run unit tests
          command: |
            go test

      - run:
          name: Start service
          command: go run main.go
          background: true # keep service running and proceed to next step
